{
    "project": {
        "name": "p2.js",
        "description": "A JavaScript 2D physics engine.",
        "version": "0.5.0"
    },
    "files": {
        "src/collision/AABB.js": {
            "name": "src/collision/AABB.js",
            "modules": {},
            "classes": {
                "AABB": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collision/Broadphase.js": {
            "name": "src/collision/Broadphase.js",
            "modules": {},
            "classes": {
                "Broadphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collision/GridBroadphase.js": {
            "name": "src/collision/GridBroadphase.js",
            "modules": {},
            "classes": {
                "GridBroadphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collision/NaiveBroadphase.js": {
            "name": "src/collision/NaiveBroadphase.js",
            "modules": {},
            "classes": {
                "NaiveBroadphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collision/Narrowphase.js": {
            "name": "src/collision/Narrowphase.js",
            "modules": {},
            "classes": {
                "Narrowphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collision/SAPBroadphase.js": {
            "name": "src/collision/SAPBroadphase.js",
            "modules": {},
            "classes": {
                "SAPBroadphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/Constraint.js": {
            "name": "src/constraints/Constraint.js",
            "modules": {},
            "classes": {
                "Constraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/DistanceConstraint.js": {
            "name": "src/constraints/DistanceConstraint.js",
            "modules": {},
            "classes": {
                "DistanceConstraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/GearConstraint.js": {
            "name": "src/constraints/GearConstraint.js",
            "modules": {},
            "classes": {
                "GearConstraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/LockConstraint.js": {
            "name": "src/constraints/LockConstraint.js",
            "modules": {},
            "classes": {
                "LockConstraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/PrismaticConstraint.js": {
            "name": "src/constraints/PrismaticConstraint.js",
            "modules": {},
            "classes": {
                "PrismaticConstraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/RevoluteConstraint.js": {
            "name": "src/constraints/RevoluteConstraint.js",
            "modules": {},
            "classes": {
                "RevoluteConstraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/equations/AngleLockEquation.js": {
            "name": "src/equations/AngleLockEquation.js",
            "modules": {},
            "classes": {
                "AngleLockEquation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/equations/ContactEquation.js": {
            "name": "src/equations/ContactEquation.js",
            "modules": {},
            "classes": {
                "ContactEquation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/equations/Equation.js": {
            "name": "src/equations/Equation.js",
            "modules": {},
            "classes": {
                "Equation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/equations/FrictionEquation.js": {
            "name": "src/equations/FrictionEquation.js",
            "modules": {},
            "classes": {
                "FrictionEquation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/equations/RotationalLockEquation.js": {
            "name": "src/equations/RotationalLockEquation.js",
            "modules": {},
            "classes": {
                "RotationalLockEquation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/equations/RotationalVelocityEquation.js": {
            "name": "src/equations/RotationalVelocityEquation.js",
            "modules": {},
            "classes": {
                "RotationalVelocityEquation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/events/EventEmitter.js": {
            "name": "src/events/EventEmitter.js",
            "modules": {},
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/material/ContactMaterial.js": {
            "name": "src/material/ContactMaterial.js",
            "modules": {},
            "classes": {
                "ContactMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/material/Material.js": {
            "name": "src/material/Material.js",
            "modules": {},
            "classes": {
                "Material": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/vec2.js": {
            "name": "src/math/vec2.js",
            "modules": {},
            "classes": {
                "vec2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/objects/Body.js": {
            "name": "src/objects/Body.js",
            "modules": {},
            "classes": {
                "Body": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/objects/Spring.js": {
            "name": "src/objects/Spring.js",
            "modules": {},
            "classes": {
                "Spring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Capsule.js": {
            "name": "src/shapes/Capsule.js",
            "modules": {},
            "classes": {
                "Capsule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Circle.js": {
            "name": "src/shapes/Circle.js",
            "modules": {},
            "classes": {
                "Circle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Convex.js": {
            "name": "src/shapes/Convex.js",
            "modules": {},
            "classes": {
                "Convex": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Heightfield.js": {
            "name": "src/shapes/Heightfield.js",
            "modules": {},
            "classes": {
                "Heightfield": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Line.js": {
            "name": "src/shapes/Line.js",
            "modules": {},
            "classes": {
                "Line": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Particle.js": {
            "name": "src/shapes/Particle.js",
            "modules": {},
            "classes": {
                "Particle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Plane.js": {
            "name": "src/shapes/Plane.js",
            "modules": {},
            "classes": {
                "Plane": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Rectangle.js": {
            "name": "src/shapes/Rectangle.js",
            "modules": {},
            "classes": {
                "Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Shape.js": {
            "name": "src/shapes/Shape.js",
            "modules": {},
            "classes": {
                "Shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/solver/GSSolver.js": {
            "name": "src/solver/GSSolver.js",
            "modules": {},
            "classes": {
                "GSSolver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/solver/Solver.js": {
            "name": "src/solver/Solver.js",
            "modules": {},
            "classes": {
                "Solver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/Utils.js": {
            "name": "src/utils/Utils.js",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/world/Island.js": {
            "name": "src/world/Island.js",
            "modules": {},
            "classes": {
                "Island": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/world/IslandManager.js": {
            "name": "src/world/IslandManager.js",
            "modules": {},
            "classes": {
                "IslandManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/world/IslandNode.js": {
            "name": "src/world/IslandNode.js",
            "modules": {},
            "classes": {
                "IslandNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/world/World.js": {
            "name": "src/world/World.js",
            "modules": {},
            "classes": {
                "World": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AABB": {
            "name": "AABB",
            "shortname": "AABB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/AABB.js",
            "line": 6,
            "description": "Axis aligned bounding box class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "upperBound",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "lowerBound",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Broadphase": {
            "name": "Broadphase",
            "shortname": "Broadphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/Broadphase.js",
            "line": 6,
            "description": "Base class for broadphase implementations.",
            "is_constructor": 1
        },
        "GridBroadphase": {
            "name": "GridBroadphase",
            "shortname": "GridBroadphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/GridBroadphase.js",
            "line": 10,
            "description": "Broadphase that uses axis-aligned bins.",
            "is_constructor": 1,
            "extends": "Broadphase",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "xmin",
                            "description": "Lower x bound of the grid",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "xmax",
                            "description": "Upper x bound",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "ymin",
                            "description": "Lower y bound",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "ymax",
                            "description": "Upper y bound",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "nx",
                            "description": "Number of bins along x axis",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "ny",
                            "description": "Number of bins along y axis",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "todo": [
                "Should have an option for dynamic scene size"
            ]
        },
        "NaiveBroadphase": {
            "name": "NaiveBroadphase",
            "shortname": "NaiveBroadphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/NaiveBroadphase.js",
            "line": 10,
            "description": "Naive broadphase implementation. Does N^2 tests.",
            "is_constructor": 1,
            "extends": "Broadphase"
        },
        "Narrowphase": {
            "name": "Narrowphase",
            "shortname": "Narrowphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/Narrowphase.js",
            "line": 38,
            "description": "Narrowphase. Creates contacts and friction given shapes and transforms.",
            "is_constructor": 1
        },
        "SAPBroadphase": {
            "name": "SAPBroadphase",
            "shortname": "SAPBroadphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/SAPBroadphase.js",
            "line": 11,
            "description": "Sweep and prune broadphase along one axis.",
            "is_constructor": 1,
            "extends": "Broadphase"
        },
        "Constraint": {
            "name": "Constraint",
            "shortname": "Constraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/Constraint.js",
            "line": 3,
            "description": "Base constraint class.",
            "is_constructor": 1,
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "collideConnected",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ]
        },
        "DistanceConstraint": {
            "name": "DistanceConstraint",
            "shortname": "DistanceConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/DistanceConstraint.js",
            "line": 7,
            "description": "Constraint that tries to keep the distance between two bodies constant.",
            "is_constructor": 1,
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "distance",
                    "description": "The distance to keep between the bodies.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxForce",
                            "description": "Maximum force to apply.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "Number.MAX_VALUE"
                        }
                    ]
                }
            ],
            "extends": "Constraint"
        },
        "GearConstraint": {
            "name": "GearConstraint",
            "shortname": "GearConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/GearConstraint.js",
            "line": 8,
            "description": "Connects two bodies at given offset points, letting them rotate relative to each other around this point.",
            "is_constructor": 1,
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "angle",
                            "description": "Relative angle between the bodies.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "ratio",
                            "description": "Gear ratio.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "maxTorque",
                            "description": "Maximum torque to apply.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Constraint",
            "todo": [
                "Ability to specify world points"
            ]
        },
        "LockConstraint": {
            "name": "LockConstraint",
            "shortname": "LockConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/LockConstraint.js",
            "line": 7,
            "description": "Locks the relative position between two bodies.",
            "is_constructor": 1,
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "localOffsetB",
                            "description": "The offset of bodyB in bodyA's frame. Default is the zero vector.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "localAngleB",
                            "description": "The angle of bodyB in bodyA's frame.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "maxForce",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Constraint"
        },
        "PrismaticConstraint": {
            "name": "PrismaticConstraint",
            "shortname": "PrismaticConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 9,
            "description": "Constraint that only allows bodies to move along a line, relative to each other. See <a href=\"http://www.iforce2d.net/b2dtut/joints-prismatic\">this tutorial</a>.",
            "is_constructor": 1,
            "extends": "Constraint",
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxForce",
                            "description": "Max force to be applied by the constraint",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "localAnchorA",
                            "description": "Body A's anchor point, defined in its own local frame.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "localAnchorB",
                            "description": "Body B's anchor point, defined in its own local frame.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "localAxisA",
                            "description": "An axis, defined in body A frame, that body B's anchor point may slide along.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "disableRotationalLock",
                            "description": "If set to true, bodyB will be free to rotate around its anchor point.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "upperLimit",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "lowerLimit",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "RevoluteConstraint": {
            "name": "RevoluteConstraint",
            "shortname": "RevoluteConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 15,
            "description": "Connects two bodies at given offset points, letting them rotate relative to each other around this point.",
            "is_constructor": 1,
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "pivotA",
                    "description": "The point relative to the center of mass of bodyA which bodyA is constrained to.",
                    "type": "Array"
                },
                {
                    "name": "bodyB",
                    "description": "Body that will be constrained in a similar way to the same point as bodyA. We will therefore get sort of a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.",
                    "type": "Body"
                },
                {
                    "name": "pivotB",
                    "description": "See pivotA.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxForce",
                            "description": "The maximum force that should be applied to constrain the bodies.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Constraint",
            "todo": [
                "Ability to specify world points"
            ]
        },
        "AngleLockEquation": {
            "name": "AngleLockEquation",
            "shortname": "AngleLockEquation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/equations/AngleLockEquation.js",
            "line": 6,
            "description": "Locks the relative angle between two bodies. The constraint tries to keep the dot product between two vectors, local in each body, to zero. The local angle in body i is a parameter.",
            "is_constructor": 1,
            "extends": "Equation",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "angle",
                            "description": "Angle to add to the local vector in body A.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "ratio",
                            "description": "Gear ratio",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "ContactEquation": {
            "name": "ContactEquation",
            "shortname": "ContactEquation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/equations/ContactEquation.js",
            "line": 6,
            "description": "Non-penetration constraint equation. Tries to make the ri and rj vectors the same point.",
            "is_constructor": 1,
            "extends": "Equation",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ]
        },
        "Equation": {
            "name": "Equation",
            "shortname": "Equation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/equations/Equation.js",
            "line": 7,
            "description": "Base class for constraint equations.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bodyA",
                    "description": "First body participating in the equation",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "Second body participating in the equation",
                    "type": "Body"
                },
                {
                    "name": "minForce",
                    "description": "Minimum force to apply. Default: -Number.MAX_VALUE",
                    "type": "Number"
                },
                {
                    "name": "maxForce",
                    "description": "Maximum force to apply. Default: Number.MAX_VALUE",
                    "type": "Number"
                }
            ]
        },
        "FrictionEquation": {
            "name": "FrictionEquation",
            "shortname": "FrictionEquation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/equations/FrictionEquation.js",
            "line": 7,
            "description": "Constrains the slipping in a contact along a tangent",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "slipForce",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "Equation"
        },
        "RotationalLockEquation": {
            "name": "RotationalLockEquation",
            "shortname": "RotationalLockEquation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/equations/RotationalLockEquation.js",
            "line": 6,
            "description": "Locks the relative angle between two bodies. The constraint tries to keep the dot product between two vectors, local in each body, to zero. The local angle in body i is a parameter.",
            "is_constructor": 1,
            "extends": "Equation",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "angle",
                            "description": "Angle to add to the local vector in body i.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "RotationalVelocityEquation": {
            "name": "RotationalVelocityEquation",
            "shortname": "RotationalVelocityEquation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/equations/RotationalVelocityEquation.js",
            "line": 6,
            "description": "Syncs rotational velocity of two bodies, or sets a relative velocity (motor).",
            "is_constructor": 1,
            "extends": "Equation",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ]
        },
        "EventEmitter": {
            "name": "EventEmitter",
            "shortname": "EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/events/EventEmitter.js",
            "line": 1,
            "description": "Base class for objects that dispatches events.",
            "is_constructor": 1
        },
        "ContactMaterial": {
            "name": "ContactMaterial",
            "shortname": "ContactMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/material/ContactMaterial.js",
            "line": 6,
            "description": "Defines what happens when two materials meet, such as what friction coefficient to use. You can also set other things such as restitution, surface velocity and constraint parameters.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "materialA",
                    "description": "",
                    "type": "Material"
                },
                {
                    "name": "materialB",
                    "description": "",
                    "type": "Material"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "friction",
                            "description": "Friction coefficient.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.3"
                        },
                        {
                            "name": "restitution",
                            "description": "Restitution coefficient aka \"bounciness\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "stiffness",
                            "description": "ContactEquation stiffness.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "relaxation",
                            "description": "ContactEquation relaxation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "frictionStiffness",
                            "description": "FrictionEquation stiffness.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "frictionRelaxation",
                            "description": "FrictionEquation relaxation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "surfaceVelocity",
                            "description": "Surface velocity.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "author": "schteppe"
        },
        "Material": {
            "name": "Material",
            "shortname": "Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/material/Material.js",
            "line": 3,
            "description": "Defines a physics material.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "string",
                    "description": "name"
                }
            ],
            "author": "schteppe"
        },
        "vec2": {
            "name": "vec2",
            "shortname": "vec2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/math/vec2.js",
            "line": 1,
            "description": "The vec2 object from glMatrix, with some extensions and some removed methods. See http://glmatrix.net for full doc."
        },
        "Body": {
            "name": "Body",
            "shortname": "Body",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/objects/Body.js",
            "line": 9,
            "description": "A rigid body. Has got a center of mass, position, velocity and a number of\nshapes that are used for collisions.",
            "is_constructor": 1,
            "extends": "EventEmitter",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "mass",
                            "description": "A number >= 0. If zero, the .motionState will be set to Body.STATIC.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "position",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "velocity",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "angle",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "angularVelocity",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "force",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "angularForce",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "fixedRotation",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "Spring": {
            "name": "Spring",
            "shortname": "Spring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/objects/Spring.js",
            "line": 5,
            "description": "A spring, connecting two bodies. The Spring explicitly adds force and angularForce to the bodies and does therefore not put load on the solver.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "restLength",
                            "description": "A number > 0. Default: 1",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "stiffness",
                            "description": "Spring constant (see Hookes Law). A number >= 0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "damping",
                            "description": "A number >= 0. Default: 1",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "worldAnchorA",
                            "description": "Where to hook the spring to body A, in world coordinates. Overrides the option \"localAnchorA\" if given.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "worldAnchorB",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "localAnchorA",
                            "description": "Where to hook the spring to body A, in local body coordinates. Defaults to the body center.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "localAnchorB",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Capsule": {
            "name": "Capsule",
            "shortname": "Capsule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Capsule.js",
            "line": 6,
            "description": "Capsule shape class.",
            "is_constructor": 1,
            "extends": "Shape",
            "params": [
                {
                    "name": "length",
                    "description": "The distance between the end points",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "radius",
                    "description": "Radius of the capsule",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "Circle": {
            "name": "Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Circle.js",
            "line": 6,
            "description": "Circle shape class.",
            "extends": "Shape",
            "is_constructor": 1,
            "params": [
                {
                    "name": "radius",
                    "description": "The radius of this circle",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ]
        },
        "Convex": {
            "name": "Convex",
            "shortname": "Convex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Convex.js",
            "line": 8,
            "description": "Convex shape class.",
            "is_constructor": 1,
            "extends": "Shape",
            "params": [
                {
                    "name": "vertices",
                    "description": "An array of Float32Array vertices that span this shape. Vertices are given in counter-clockwise (CCW) direction.",
                    "type": "Array"
                }
            ]
        },
        "Heightfield": {
            "name": "Heightfield",
            "shortname": "Heightfield",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Heightfield.js",
            "line": 6,
            "description": "Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a distance \"elementWidth\".",
            "extends": "Shape",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "maxValue",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elementWidth",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "Should take maxValue as an option and also be able to compute it itself if not given.",
                "Should be possible to use along all axes",
                "not just y"
            ]
        },
        "Line": {
            "name": "Line",
            "shortname": "Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Line.js",
            "line": 6,
            "description": "Line shape class. The line shape is along the x direction, and stretches from [-length/2, 0] to [length/2,0].",
            "params": [
                {
                    "name": "length",
                    "description": "The total length of the line",
                    "type": "Number"
                }
            ],
            "extends": "Shape",
            "is_constructor": 1
        },
        "Particle": {
            "name": "Particle",
            "shortname": "Particle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Particle.js",
            "line": 6,
            "description": "Particle shape class.",
            "is_constructor": 1,
            "extends": "Shape"
        },
        "Plane": {
            "name": "Plane",
            "shortname": "Plane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Plane.js",
            "line": 7,
            "description": "Plane shape class. The plane is facing in the Y direction.",
            "extends": "Shape",
            "is_constructor": 1
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Rectangle.js",
            "line": 7,
            "description": "Rectangle shape class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "w",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "extends": "Convex"
        },
        "Shape": {
            "name": "Shape",
            "shortname": "Shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Shape.js",
            "line": 3,
            "description": "Base class for shapes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "GSSolver": {
            "name": "GSSolver",
            "shortname": "GSSolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/solver/GSSolver.js",
            "line": 8,
            "description": "Iterative Gauss-Seidel constraint equation solver.",
            "is_constructor": 1,
            "extends": "Solver",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "iterations",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10"
                        },
                        {
                            "name": "tolerance",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ]
        },
        "Solver": {
            "name": "Solver",
            "shortname": "Solver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/solver/Solver.js",
            "line": 6,
            "description": "Base class for constraint solvers.",
            "is_constructor": 1,
            "extends": "EventEmitter"
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/utils/Utils.js",
            "line": 3,
            "description": "Misc utility functions",
            "is_constructor": 1
        },
        "Island": {
            "name": "Island",
            "shortname": "Island",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/world/Island.js",
            "line": 5,
            "description": "An island of bodies connected with equations.",
            "is_constructor": 1
        },
        "IslandManager": {
            "name": "IslandManager",
            "shortname": "IslandManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/world/IslandManager.js",
            "line": 8,
            "description": "Splits the system of bodies and equations into independent islands",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "extends": "Solver"
        },
        "IslandNode": {
            "name": "IslandNode",
            "shortname": "IslandNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/world/IslandNode.js",
            "line": 3,
            "description": "Holds a body and keeps track of some additional properties needed for graph traversal.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ]
        },
        "World": {
            "name": "World",
            "shortname": "World",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/world/World.js",
            "line": 46,
            "description": "The dynamics world, where all bodies and constraints lives.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "solver",
                            "description": "Defaults to GSSolver.",
                            "type": "Solver"
                        },
                        {
                            "name": "gravity",
                            "description": "Defaults to [0,-9.78]",
                            "type": "Array"
                        },
                        {
                            "name": "broadphase",
                            "description": "Defaults to NaiveBroadphase",
                            "type": "Broadphase"
                        },
                        {
                            "name": "islandSplit",
                            "description": "",
                            "type": "Boolean"
                        },
                        {
                            "name": "doProfiling",
                            "description": "",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "extends": "EventEmitter"
        }
    },
    "classitems": [
        {
            "file": "src/collision/AABB.js",
            "line": 16,
            "description": "The lower bound of the bounding box.",
            "itemtype": "property",
            "name": "lowerBound",
            "type": "{Array}",
            "class": "AABB"
        },
        {
            "file": "src/collision/AABB.js",
            "line": 26,
            "description": "The upper bound of the bounding box.",
            "itemtype": "property",
            "name": "upperBound",
            "type": "{Array}",
            "class": "AABB"
        },
        {
            "file": "src/collision/AABB.js",
            "line": 39,
            "description": "Set the AABB bounds from a set of points.",
            "itemtype": "method",
            "name": "setFromPoints",
            "params": [
                {
                    "name": "points",
                    "description": "An array of vec2's.",
                    "type": "Array"
                }
            ],
            "class": "AABB"
        },
        {
            "file": "src/collision/AABB.js",
            "line": 74,
            "description": "Copy bounds from an AABB to this AABB",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "aabb",
                    "description": "",
                    "type": "AABB"
                }
            ],
            "class": "AABB"
        },
        {
            "file": "src/collision/AABB.js",
            "line": 84,
            "description": "Extend this AABB so that it covers the given AABB too.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "aabb",
                    "description": "",
                    "type": "AABB"
                }
            ],
            "class": "AABB"
        },
        {
            "file": "src/collision/AABB.js",
            "line": 104,
            "description": "Returns true if the given AABB overlaps this AABB.",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "aabb",
                    "description": "",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AABB"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 15,
            "description": "The resulting overlapping pairs. Will be filled with results during .getCollisionPairs().",
            "itemtype": "property",
            "name": "result",
            "type": "{Array}",
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 22,
            "description": "The world to search for collision pairs in. To change it, use .setWorld()",
            "itemtype": "property",
            "name": "world",
            "type": "{World}",
            "readonly": "",
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 30,
            "description": "The bounding volume type to use in the broadphase algorithms.",
            "itemtype": "property",
            "name": "boundingVolumeType",
            "type": "Number",
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 37,
            "description": "Axis aligned bounding box type.",
            "static": 1,
            "itemtype": "property",
            "name": "AABB",
            "type": "Number",
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 44,
            "description": "Bounding circle type.",
            "static": 1,
            "itemtype": "property",
            "name": "BOUNDING_CIRCLE",
            "type": "Number",
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 51,
            "description": "Set the world that we are searching for collision pairs in",
            "itemtype": "method",
            "name": "setWorld",
            "params": [
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 60,
            "description": "Get all potential intersecting body pairs.",
            "itemtype": "method",
            "name": "getCollisionPairs",
            "params": [
                {
                    "name": "world",
                    "description": "The world to search in.",
                    "type": "World"
                }
            ],
            "return": {
                "description": "An array of the bodies, ordered in pairs. Example: A result of [a,b,c,d] means that the potential pairs are: (a,b), (c,d).",
                "type": "Array"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 72,
            "description": "Check whether the bounding radius of two bodies overlap.",
            "itemtype": "method",
            "name": "boundingRadiusCheck",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 86,
            "description": "Check whether the bounding radius of two bodies overlap.",
            "itemtype": "method",
            "name": "boundingRadiusCheck",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 103,
            "description": "Check whether the bounding radius of two bodies overlap.",
            "itemtype": "method",
            "name": "boundingRadiusCheck",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 126,
            "description": "Check whether two bodies are allowed to collide at all.",
            "itemtype": "method",
            "name": "canCollide",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/GridBroadphase.js",
            "line": 49,
            "description": "Get collision pairs.",
            "itemtype": "method",
            "name": "getCollisionPairs",
            "params": [
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "GridBroadphase"
        },
        {
            "file": "src/collision/NaiveBroadphase.js",
            "line": 22,
            "description": "Get the colliding pairs",
            "itemtype": "method",
            "name": "getCollisionPairs",
            "params": [
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "NaiveBroadphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 45,
            "itemtype": "property",
            "name": "contactEquations",
            "type": "{Array}",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 51,
            "itemtype": "property",
            "name": "frictionEquations",
            "type": "{Array}",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 57,
            "description": "Whether to make friction equations in the upcoming contacts.",
            "itemtype": "property",
            "name": "enableFriction",
            "type": "{Boolean}",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 64,
            "description": "The friction slip force to use when creating friction equations.",
            "itemtype": "property",
            "name": "slipForce",
            "type": "{Number}",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 71,
            "description": "The friction value to use in the upcoming friction equations.",
            "itemtype": "property",
            "name": "frictionCoefficient",
            "type": "{Number}",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 78,
            "description": "Will be the .relativeVelocity in each produced FrictionEquation.",
            "itemtype": "property",
            "name": "surfaceVelocity",
            "type": "Number",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 88,
            "description": "The restitution value to use in the next contact equations.",
            "itemtype": "property",
            "name": "restitution",
            "type": "{Number}",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 95,
            "description": "The stiffness value to use in the next contact equations.",
            "itemtype": "property",
            "name": "stiffness",
            "type": "Number",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 101,
            "description": "The stiffness value to use in the next contact equations.",
            "itemtype": "property",
            "name": "stiffness",
            "type": "Number",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 107,
            "description": "The stiffness value to use in the next friction equations.",
            "itemtype": "property",
            "name": "frictionStiffness",
            "type": "{Number}",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 114,
            "description": "The relaxation value to use in the next friction equations.",
            "itemtype": "property",
            "name": "frictionRelaxation",
            "type": "{Number}",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 126,
            "description": "Check if the bodies were in contact since the last reset().",
            "itemtype": "method",
            "name": "collidedLastStep",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 157,
            "description": "Throws away the old equations and gets ready to create new",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 195,
            "description": "Creates a ContactEquation, either by reusing an existing object or creating a new one.",
            "itemtype": "method",
            "name": "createContactEquation",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "ContactEquation"
            },
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 218,
            "description": "Creates a FrictionEquation, either by reusing an existing object or creating a new one.",
            "itemtype": "method",
            "name": "createFrictionEquation",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "FrictionEquation"
            },
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 241,
            "description": "Creates a FrictionEquation given the data in the ContactEquation. Uses same offset vectors ri and rj, but the tangent vector will be constructed from the collision normal.",
            "itemtype": "method",
            "name": "createFrictionFromContact",
            "params": [
                {
                    "name": "contactEquation",
                    "description": "",
                    "type": "ContactEquation"
                }
            ],
            "return": {
                "description": "",
                "type": "FrictionEquation"
            },
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 256,
            "description": "Convex/line narrowphase",
            "itemtype": "method",
            "name": "convexLine",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "Implement me!"
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 278,
            "description": "Line/rectangle narrowphase",
            "itemtype": "method",
            "name": "lineRectangle",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Rectangle"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "Implement me!"
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 310,
            "description": "Convex/capsule narrowphase",
            "itemtype": "method",
            "name": "convexCapsule",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Capsule"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "Implement me!"
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 351,
            "description": "Capsule/line narrowphase",
            "itemtype": "method",
            "name": "lineCapsule",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Capsule"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "Implement me!"
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 377,
            "description": "Capsule/capsule narrowphase",
            "itemtype": "method",
            "name": "capsuleCapsule",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Capsule"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Capsule"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "Implement me!"
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 439,
            "description": "Line/line narrowphase",
            "itemtype": "method",
            "name": "lineLine",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "Implement me!"
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 461,
            "description": "Plane/line Narrowphase",
            "itemtype": "method",
            "name": "planeLine",
            "params": [
                {
                    "name": "planeBody",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "planeShape",
                    "description": "",
                    "type": "Plane"
                },
                {
                    "name": "planeOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "planeAngle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "lineBody",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "lineShape",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "lineOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "lineAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 561,
            "description": "Circle/line Narrowphase",
            "itemtype": "method",
            "name": "circleLine",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "justTest",
                    "description": "If set to true, this function will return the result (intersection or not) without adding equations.",
                    "type": "Boolean"
                },
                {
                    "name": "lineRadius",
                    "description": "Radius to add to the line. Can be used to test Capsules.",
                    "type": "Number"
                },
                {
                    "name": "circleRadius",
                    "description": "If set, this value overrides the circle shape radius.",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 722,
            "description": "Circle/capsule Narrowphase",
            "itemtype": "method",
            "name": "circleCapsule",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 739,
            "description": "Circle/convex Narrowphase",
            "itemtype": "method",
            "name": "circleConvex",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 994,
            "description": "Particle/convex Narrowphase",
            "itemtype": "method",
            "name": "particleConvex",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Particle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "use pointInConvex and code more similar to circleConvex"
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1142,
            "description": "Circle/circle Narrowphase",
            "itemtype": "method",
            "name": "circleCircle",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1197,
            "description": "Plane/Convex Narrowphase",
            "itemtype": "method",
            "name": "planeConvex",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Plane"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1271,
            "itemtype": "method",
            "name": "convexPlane",
            "deprecated": true,
            "deprecationMessage": "Use .planeConvex() instead!",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1280,
            "description": "Narrowphase for particle vs plane",
            "itemtype": "method",
            "name": "particlePlane",
            "params": [
                {
                    "name": "bi",
                    "description": "The particle body",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "Particle shape",
                    "type": "Particle"
                },
                {
                    "name": "xi",
                    "description": "World position for the particle",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "World angle for the particle",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "Plane body",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "Plane shape",
                    "type": "Plane"
                },
                {
                    "name": "xj",
                    "description": "World position for the plane",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "World angle for the plane",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1336,
            "description": "Circle/Particle Narrowphase",
            "itemtype": "method",
            "name": "circleParticle",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Particle"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1416,
            "itemtype": "method",
            "name": "capsulePlane",
            "deprecated": true,
            "deprecationMessage": "Use .planeCapsule() instead!",
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1425,
            "description": "Creates ContactEquations and FrictionEquations for a collision.",
            "itemtype": "method",
            "name": "circlePlane",
            "params": [
                {
                    "name": "bi",
                    "description": "The first body that should be connected to the equations.",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "The circle shape participating in the collision.",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "Extra offset to take into account for the Shape, in addition to the one in circleBody.position. Will *not* be rotated by circleBody.angle (maybe it should, for sake of homogenity?). Set to null if none.",
                    "type": "Array"
                },
                {
                    "name": "bj",
                    "description": "The second body that should be connected to the equations.",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "The Plane shape that is participating",
                    "type": "Plane"
                },
                {
                    "name": "xj",
                    "description": "Extra offset for the plane shape.",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "Extra angle to apply to the plane",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1497,
            "description": "Convex/convex Narrowphase.See <a href=\"http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\">this article</a> for more info.",
            "itemtype": "method",
            "name": "convexConvex",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1656,
            "description": "Project a Convex onto a world-oriented axis",
            "itemtype": "method",
            "name": "projectConvexOntoAxis",
            "static": 1,
            "params": [
                {
                    "name": "convexShape",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "convexOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "convexAngle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "worldAxis",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "result",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1704,
            "description": "Find a separating axis between the shapes, that maximizes the separating distance between them.",
            "itemtype": "method",
            "name": "findSeparatingAxis",
            "static": 1,
            "params": [
                {
                    "name": "c1",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "offset1",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c2",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "offset2",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sepAxis",
                    "description": "The resulting axis",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Whether the axis could be found.",
                "type": "Boolean"
            },
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1781,
            "description": "Get the edge that has a normal closest to an axis.",
            "itemtype": "method",
            "name": "getClosestEdge",
            "static": 1,
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "flip",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Index of the edge that is closest. This index and the next spans the resulting edge. Returns -1 if failed.",
                "type": "Number"
            },
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/Narrowphase.js",
            "line": 1831,
            "itemtype": "method",
            "name": "circleHeightfield",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Heightfield"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Narrowphase"
        },
        {
            "file": "src/collision/SAPBroadphase.js",
            "line": 21,
            "description": "List of bodies currently in the broadphase.",
            "itemtype": "property",
            "name": "axisListX",
            "type": "{Array}",
            "class": "SAPBroadphase"
        },
        {
            "file": "src/collision/SAPBroadphase.js",
            "line": 28,
            "description": "List of bodies currently in the broadphase.",
            "itemtype": "property",
            "name": "axisListY",
            "type": "{Array}",
            "class": "SAPBroadphase"
        },
        {
            "file": "src/collision/SAPBroadphase.js",
            "line": 35,
            "description": "The world to search in.",
            "itemtype": "property",
            "name": "world",
            "type": "{World}",
            "class": "SAPBroadphase"
        },
        {
            "file": "src/collision/SAPBroadphase.js",
            "line": 62,
            "description": "Change the world",
            "itemtype": "method",
            "name": "setWorld",
            "params": [
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "class": "SAPBroadphase"
        },
        {
            "file": "src/collision/SAPBroadphase.js",
            "line": 86,
            "description": "Sorts bodies along the X axis.",
            "itemtype": "method",
            "name": "sortAxisListX",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "SAPBroadphase"
        },
        {
            "file": "src/collision/SAPBroadphase.js",
            "line": 105,
            "description": "Sorts bodies along the Y axis.",
            "itemtype": "method",
            "name": "sortAxisListY",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "SAPBroadphase"
        },
        {
            "file": "src/collision/SAPBroadphase.js",
            "line": 126,
            "description": "Get the colliding pairs",
            "itemtype": "method",
            "name": "getCollisionPairs",
            "params": [
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "SAPBroadphase"
        },
        {
            "file": "src/collision/SAPBroadphase.js",
            "line": 201,
            "description": "Check if the bounds of two bodies overlap, along the given SAP axis.",
            "static": 1,
            "itemtype": "method",
            "name": "checkBounds",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "axisIndex",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SAPBroadphase"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 20,
            "description": "Equations to be solved in this constraint",
            "itemtype": "property",
            "name": "equations",
            "type": "{Array}",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 28,
            "description": "First body participating in the constraint.",
            "itemtype": "property",
            "name": "bodyA",
            "type": "{Body}",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 35,
            "description": "Second body participating in the constraint.",
            "itemtype": "property",
            "name": "bodyB",
            "type": "{Body}",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 42,
            "description": "Set to true if you want the connected bodies to collide.",
            "itemtype": "property",
            "name": "collideConnected",
            "type": "{Boolean}",
            "default": "true",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 55,
            "description": "Updates the internal constraint parameters before solve.",
            "itemtype": "method",
            "name": "update",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 69,
            "description": "Set stiffness for this constraint.",
            "itemtype": "method",
            "name": "setStiffness",
            "params": [
                {
                    "name": "stiffness",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 83,
            "description": "Set relaxation for this constraint.",
            "itemtype": "method",
            "name": "setRelaxation",
            "params": [
                {
                    "name": "relaxation",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Constraint"
        },
        {
            "file": "src/constraints/DistanceConstraint.js",
            "line": 25,
            "description": "The distance to keep.",
            "itemtype": "property",
            "name": "distance",
            "type": "{Number}",
            "class": "DistanceConstraint"
        },
        {
            "file": "src/constraints/DistanceConstraint.js",
            "line": 53,
            "description": "Update the constraint equations. Should be done if any of the bodies changed position, before solving.",
            "itemtype": "method",
            "name": "update",
            "class": "DistanceConstraint"
        },
        {
            "file": "src/constraints/DistanceConstraint.js",
            "line": 73,
            "description": "Set the max force to be used",
            "itemtype": "method",
            "name": "setMaxForce",
            "params": [
                {
                    "name": "f",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "DistanceConstraint"
        },
        {
            "file": "src/constraints/DistanceConstraint.js",
            "line": 84,
            "description": "Get the max force",
            "itemtype": "method",
            "name": "getMaxForce",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "DistanceConstraint"
        },
        {
            "file": "src/constraints/GearConstraint.js",
            "line": 31,
            "description": "The relative angle",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "class": "GearConstraint"
        },
        {
            "file": "src/constraints/GearConstraint.js",
            "line": 38,
            "description": "The gear ratio.",
            "itemtype": "property",
            "name": "ratio",
            "type": "{Number}",
            "class": "GearConstraint"
        },
        {
            "file": "src/constraints/GearConstraint.js",
            "line": 60,
            "description": "Set the max torque for the constraint.",
            "itemtype": "method",
            "name": "setMaxTorque",
            "params": [
                {
                    "name": "torque",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GearConstraint"
        },
        {
            "file": "src/constraints/GearConstraint.js",
            "line": 69,
            "description": "Get the max torque for the constraint.",
            "itemtype": "method",
            "name": "getMaxTorque",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "GearConstraint"
        },
        {
            "file": "src/constraints/LockConstraint.js",
            "line": 84,
            "description": "The offset of bodyB in bodyA's frame.",
            "itemtype": "property",
            "name": "localOffsetB",
            "type": "Array",
            "class": "LockConstraint"
        },
        {
            "file": "src/constraints/LockConstraint.js",
            "line": 90,
            "description": "The offset angle of bodyB in bodyA's frame.",
            "itemtype": "property",
            "name": "localAngleB",
            "type": "Number",
            "class": "LockConstraint"
        },
        {
            "file": "src/constraints/LockConstraint.js",
            "line": 101,
            "description": "Set the maximum force to be applied.",
            "itemtype": "method",
            "name": "setMaxForce",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LockConstraint"
        },
        {
            "file": "src/constraints/LockConstraint.js",
            "line": 114,
            "description": "Get the max force.",
            "itemtype": "method",
            "name": "getMaxForce",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "LockConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 39,
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{Array}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 45,
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{Array}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 51,
            "itemtype": "property",
            "name": "localAxisA",
            "type": "{Array}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 113,
            "description": "The position of anchor A relative to anchor B, along the constraint axis.",
            "itemtype": "property",
            "name": "position",
            "type": "{Number}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 122,
            "description": "Set to true to enable lower limit.",
            "itemtype": "property",
            "name": "lowerLimitEnabled",
            "type": "{Boolean}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 129,
            "description": "Set to true to enable upper limit.",
            "itemtype": "property",
            "name": "upperLimitEnabled",
            "type": "{Boolean}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 136,
            "description": "Lower constraint limit. The constraint position is forced to be larger than this value.",
            "itemtype": "property",
            "name": "lowerLimit",
            "type": "{Number}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 143,
            "description": "Upper constraint limit. The constraint position is forced to be smaller than this value.",
            "itemtype": "property",
            "name": "upperLimit",
            "type": "{Number}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 158,
            "description": "Equation used for the motor.",
            "itemtype": "property",
            "name": "motorEquation",
            "type": "{Equation}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 165,
            "description": "The current motor state. Enable or disable the motor using .enableMotor",
            "itemtype": "property",
            "name": "motorEnabled",
            "type": "{Boolean}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 172,
            "description": "Set the target speed for the motor.",
            "itemtype": "property",
            "name": "motorSpeed",
            "type": "{Number}",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 204,
            "description": "Update the constraint equations. Should be done if any of the bodies changed position, before solving.",
            "itemtype": "method",
            "name": "update",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 294,
            "description": "Enable the motor",
            "itemtype": "method",
            "name": "enableMotor",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/PrismaticConstraint.js",
            "line": 304,
            "description": "Disable the rotational motor",
            "itemtype": "method",
            "name": "disableMotor",
            "class": "PrismaticConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 35,
            "itemtype": "property",
            "name": "pivotA",
            "type": "Array",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 40,
            "itemtype": "property",
            "name": "pivotB",
            "type": "Array",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 78,
            "description": "Indicates whether the motor is enabled. Use .enableMotor() to enable the constraint motor.",
            "itemtype": "property",
            "name": "motorEnabled",
            "type": "Boolean",
            "readonly": "",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 85,
            "description": "The constraint position.",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "readonly": "",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 93,
            "description": "Set to true to enable lower limit",
            "itemtype": "property",
            "name": "lowerLimitEnabled",
            "type": "{Boolean}",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 100,
            "description": "Set to true to enable upper limit",
            "itemtype": "property",
            "name": "upperLimitEnabled",
            "type": "{Boolean}",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 107,
            "description": "The lower limit on the constraint angle.",
            "itemtype": "property",
            "name": "lowerLimit",
            "type": "{Boolean}",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 114,
            "description": "The upper limit on the constraint angle.",
            "itemtype": "property",
            "name": "upperLimit",
            "type": "{Boolean}",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 208,
            "description": "Enable the rotational motor",
            "itemtype": "method",
            "name": "enableMotor",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 218,
            "description": "Disable the rotational motor",
            "itemtype": "method",
            "name": "disableMotor",
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 229,
            "description": "Check if the motor is enabled.",
            "itemtype": "method",
            "name": "motorIsEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 238,
            "description": "Set the speed of the rotational constraint motor",
            "itemtype": "method",
            "name": "setMotorSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/constraints/RevoluteConstraint.js",
            "line": 251,
            "description": "Get the speed of the rotational constraint motor",
            "itemtype": "method",
            "name": "getMotorSpeed",
            "return": {
                "description": "The current speed, or false if the motor is not enabled.",
                "type": "Number"
            },
            "class": "RevoluteConstraint"
        },
        {
            "file": "src/equations/AngleLockEquation.js",
            "line": 23,
            "description": "The gear ratio.",
            "itemtype": "property",
            "name": "ratio",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "see": [
                "setRatio"
            ],
            "class": "AngleLockEquation"
        },
        {
            "file": "src/equations/AngleLockEquation.js",
            "line": 40,
            "description": "Set the gear ratio for this equation",
            "itemtype": "method",
            "name": "setRatio",
            "params": [
                {
                    "name": "ratio",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "AngleLockEquation"
        },
        {
            "file": "src/equations/AngleLockEquation.js",
            "line": 52,
            "description": "Set the max force for the equation.",
            "itemtype": "method",
            "name": "setMaxTorque",
            "params": [
                {
                    "name": "torque",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "AngleLockEquation"
        },
        {
            "file": "src/equations/ContactEquation.js",
            "line": 18,
            "description": "Vector from body i center of mass to the contact point.",
            "itemtype": "property",
            "name": "contactPointA",
            "type": "{Array}",
            "class": "ContactEquation"
        },
        {
            "file": "src/equations/ContactEquation.js",
            "line": 26,
            "description": "World-oriented vector from body A center of mass to the contact point.",
            "itemtype": "property",
            "name": "contactPointB",
            "type": "{Array}",
            "class": "ContactEquation"
        },
        {
            "file": "src/equations/ContactEquation.js",
            "line": 33,
            "description": "The normal vector, pointing out of body i",
            "itemtype": "property",
            "name": "normalA",
            "type": "{Array}",
            "class": "ContactEquation"
        },
        {
            "file": "src/equations/ContactEquation.js",
            "line": 40,
            "description": "The restitution to use (0=no bounciness, 1=max bounciness).",
            "itemtype": "property",
            "name": "restitution",
            "type": "{Number}",
            "class": "ContactEquation"
        },
        {
            "file": "src/equations/ContactEquation.js",
            "line": 47,
            "description": "This property is set to true if this is the first impact between the bodies (not persistant contact).",
            "itemtype": "property",
            "name": "firstImpact",
            "type": "{Boolean}",
            "readonly": "",
            "class": "ContactEquation"
        },
        {
            "file": "src/equations/ContactEquation.js",
            "line": 55,
            "description": "The shape in body i that triggered this contact.",
            "itemtype": "property",
            "name": "shapeA",
            "type": "{Shape}",
            "class": "ContactEquation"
        },
        {
            "file": "src/equations/ContactEquation.js",
            "line": 62,
            "description": "The shape in body j that triggered this contact.",
            "itemtype": "property",
            "name": "shapeB",
            "type": "{Shape}",
            "class": "ContactEquation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 18,
            "description": "Minimum force to apply when solving.",
            "itemtype": "property",
            "name": "minForce",
            "type": "{Number}",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 25,
            "description": "Max force to apply when solving.",
            "itemtype": "property",
            "name": "maxForce",
            "type": "{Number}",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 32,
            "description": "First body participating in the constraint",
            "itemtype": "property",
            "name": "bodyA",
            "type": "{Body}",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 39,
            "description": "Second body participating in the constraint",
            "itemtype": "property",
            "name": "bodyB",
            "type": "{Body}",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 46,
            "description": "The stiffness of this equation. Typically chosen to a large number (~1e7), but can be chosen somewhat freely to get a stable simulation.",
            "itemtype": "property",
            "name": "stiffness",
            "type": "{Number}",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 53,
            "description": "The number of time steps needed to stabilize the constraint equation. Typically between 3 and 5 time steps.",
            "itemtype": "property",
            "name": "relaxation",
            "type": "{Number}",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 60,
            "description": "The Jacobian entry of this equation. 6 numbers, 3 per body (x,y,angle).",
            "itemtype": "property",
            "name": "G",
            "type": "{Array}",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 84,
            "description": "Indicates if stiffness or relaxation was changed.",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "Boolean",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 90,
            "description": "The resulting constraint multiplier from the last solve. This is mostly equivalent to the force produced by the constraint.",
            "itemtype": "property",
            "name": "multiplier",
            "type": "{Number}",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 97,
            "description": "Relative velocity.",
            "itemtype": "property",
            "name": "relativeVelocity",
            "type": "Number",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 103,
            "description": "Whether this equation is enabled or not. If true, it will be added to the solver.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 111,
            "description": "The default stiffness when creating a new Equation.",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_STIFFNESS",
            "type": "Number",
            "default": "1e6",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 119,
            "description": "The default relaxation when creating a new Equation.",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_RELAXATION",
            "type": "Number",
            "default": "4",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 127,
            "description": "Compute SPOOK parameters .a, .b and .epsilon according to the current parameters. See equations 9, 10 and 11 in the <a href=\"http://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\">SPOOK notes</a>.",
            "itemtype": "method",
            "name": "update",
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 152,
            "description": "Computes the RHS of the SPOOK equation",
            "itemtype": "method",
            "name": "computeB",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 164,
            "description": "Computes G*q, where q are the generalized body coordinates",
            "itemtype": "method",
            "name": "computeGq",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 209,
            "description": "Computes G*W, where W are the body velocities",
            "itemtype": "method",
            "name": "computeGW",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 225,
            "description": "Computes G*Wlambda, where W are the body velocities",
            "itemtype": "method",
            "name": "computeGWlambda",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 241,
            "description": "Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.",
            "itemtype": "method",
            "name": "computeGiMf",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 282,
            "description": "Computes G*inv(M)*G'",
            "itemtype": "method",
            "name": "computeGiMGt",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 311,
            "description": "Add constraint velocity to the bodies.",
            "itemtype": "method",
            "name": "addToWlambda",
            "params": [
                {
                    "name": "deltalambda",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Equation"
        },
        {
            "file": "src/equations/Equation.js",
            "line": 352,
            "description": "Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps",
            "itemtype": "method",
            "name": "computeInvC",
            "params": [
                {
                    "name": "eps",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Equation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 20,
            "description": "Relative vector from center of body A to the contact point, world oriented.",
            "itemtype": "property",
            "name": "contactPointA",
            "type": "{Array}",
            "class": "FrictionEquation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 27,
            "description": "Relative vector from center of body B to the contact point, world oriented.",
            "itemtype": "property",
            "name": "contactPointB",
            "type": "{Array}",
            "class": "FrictionEquation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 34,
            "description": "Tangent vector that the friction force will act along. World oriented.",
            "itemtype": "property",
            "name": "t",
            "type": "{Array}",
            "class": "FrictionEquation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 41,
            "description": "A ContactEquation connected to this friction. The contact equation can be used to rescale the max force for the friction.",
            "itemtype": "property",
            "name": "contactEquation",
            "type": "{ContactEquation}",
            "class": "FrictionEquation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 48,
            "description": "The shape in body i that triggered this friction.",
            "itemtype": "property",
            "name": "shapeA",
            "type": "{Shape}",
            "todo": [
                "Needed? The shape can be looked up via contactEquation.shapeA..."
            ],
            "class": "FrictionEquation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 56,
            "description": "The shape in body j that triggered this friction.",
            "itemtype": "property",
            "name": "shapeB",
            "type": "{Shape}",
            "todo": [
                "Needed? The shape can be looked up via contactEquation.shapeB..."
            ],
            "class": "FrictionEquation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 64,
            "description": "The friction coefficient to use.",
            "itemtype": "property",
            "name": "frictionCoefficient",
            "type": "{Number}",
            "class": "FrictionEquation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 74,
            "description": "Set the slipping condition for the constraint. The friction force cannot be\nlarger than this value.",
            "itemtype": "method",
            "name": "setSlipForce",
            "params": [
                {
                    "name": "slipForce",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "FrictionEquation"
        },
        {
            "file": "src/equations/FrictionEquation.js",
            "line": 85,
            "description": "Get the max force for the constraint.",
            "itemtype": "method",
            "name": "getSlipForce",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FrictionEquation"
        },
        {
            "file": "src/events/EventEmitter.js",
            "line": 13,
            "description": "Add an event listener",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The self object, for chainability.",
                "type": "EventEmitter"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/events/EventEmitter.js",
            "line": 33,
            "description": "Check if an event listener is added",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/events/EventEmitter.js",
            "line": 49,
            "description": "Remove an event listener",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The self object, for chainability.",
                "type": "EventEmitter"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/events/EventEmitter.js",
            "line": 66,
            "description": "Emit an event.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The self object, for chainability.",
                "type": "EventEmitter"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 28,
            "description": "The contact material identifier",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 35,
            "description": "First material participating in the contact material",
            "itemtype": "property",
            "name": "materialA",
            "type": "{Material}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 42,
            "description": "Second material participating in the contact material",
            "itemtype": "property",
            "name": "materialB",
            "type": "{Material}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 49,
            "description": "Friction to use in the contact of these two materials",
            "itemtype": "property",
            "name": "friction",
            "type": "{Number}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 56,
            "description": "Restitution to use in the contact of these two materials",
            "itemtype": "property",
            "name": "restitution",
            "type": "{Number}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 63,
            "description": "Stiffness of the resulting ContactEquation that this ContactMaterial generate",
            "itemtype": "property",
            "name": "stiffness",
            "type": "{Number}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 70,
            "description": "Relaxation of the resulting ContactEquation that this ContactMaterial generate",
            "itemtype": "property",
            "name": "relaxation",
            "type": "{Number}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 77,
            "description": "Stiffness of the resulting FrictionEquation that this ContactMaterial generate",
            "itemtype": "property",
            "name": "frictionStiffness",
            "type": "{Number}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 84,
            "description": "Relaxation of the resulting FrictionEquation that this ContactMaterial generate",
            "itemtype": "property",
            "name": "frictionRelaxation",
            "type": "{Number}",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/ContactMaterial.js",
            "line": 91,
            "description": "Will add surface velocity to this material. If bodyA rests on top if bodyB, and the surface velocity is positive, bodyA will slide to the right.",
            "itemtype": "property",
            "name": "surfaceVelocity",
            "type": "Number",
            "class": "ContactMaterial"
        },
        {
            "file": "src/material/Material.js",
            "line": 11,
            "description": "The material identifier",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "class": "Material"
        },
        {
            "file": "src/math/vec2.js",
            "line": 8,
            "description": "Make a cross product and only return the z component",
            "itemtype": "method",
            "name": "crossLength",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 20,
            "description": "Cross product between a vector and the Z component of a vector",
            "itemtype": "method",
            "name": "crossVZ",
            "static": 1,
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "vec",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "zcomp",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 35,
            "description": "Cross product between a vector and the Z component of a vector",
            "itemtype": "method",
            "name": "crossZV",
            "static": 1,
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "zcomp",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "vec",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 50,
            "description": "Rotate a vector by an angle",
            "itemtype": "method",
            "name": "rotate",
            "static": 1,
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 67,
            "description": "Transform a point position to local frame.",
            "itemtype": "method",
            "name": "toLocalFrame",
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "worldPoint",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "framePosition",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "frameAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 81,
            "description": "Transform a point position to global frame.",
            "itemtype": "method",
            "name": "toGlobalFrame",
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "localPoint",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "framePosition",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "frameAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 95,
            "description": "Compute centroid of a triangle spanned by vectors a,b,c. See http://easycalculation.com/analytical/learn-centroid.php",
            "itemtype": "method",
            "name": "centroid",
            "static": 1,
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "The out object",
                "type": "Float32Array"
            },
            "class": "vec2"
        },
        {
            "file": "src/objects/Body.js",
            "line": 31,
            "description": "The body identifyer",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 38,
            "description": "The world that this body is added to. This property is set to NULL if the body is not added to any world.",
            "itemtype": "property",
            "name": "world",
            "type": "{World}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 45,
            "description": "The shapes of the body. The local transform of the shape in .shapes[i] is\ndefined by .shapeOffsets[i] and .shapeAngles[i].",
            "itemtype": "property",
            "name": "shapes",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 54,
            "description": "The local shape offsets, relative to the body center of mass. This is an\narray of Array.",
            "itemtype": "property",
            "name": "shapeOffsets",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 62,
            "description": "The body-local shape angle transforms. This is an array of numbers (angles).",
            "itemtype": "property",
            "name": "shapeAngles",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 69,
            "description": "The mass of the body.",
            "itemtype": "property",
            "name": "mass",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 76,
            "description": "The inverse mass of the body.",
            "itemtype": "property",
            "name": "invMass",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 83,
            "description": "The inertia of the body around the Z axis.",
            "itemtype": "property",
            "name": "inertia",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 90,
            "description": "The inverse inertia of the body.",
            "itemtype": "property",
            "name": "invInertia",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 97,
            "description": "Set to true if you want to fix the rotation of the body.",
            "itemtype": "property",
            "name": "fixedRotation",
            "type": "{Boolean}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 104,
            "description": "The position of the body",
            "itemtype": "property",
            "name": "position",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 114,
            "description": "The interpolated position of the body.",
            "itemtype": "property",
            "name": "interpolatedPosition",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 121,
            "description": "The interpolated angle of the body.",
            "itemtype": "property",
            "name": "interpolatedAngle",
            "type": "{Number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 128,
            "description": "The previous position of the body.",
            "itemtype": "property",
            "name": "previousPosition",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 135,
            "description": "The previous angle of the body.",
            "itemtype": "property",
            "name": "previousAngle",
            "type": "{Number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 142,
            "description": "The velocity of the body",
            "itemtype": "property",
            "name": "velocity",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 152,
            "description": "Constraint velocity that was added to the body during the last step.",
            "itemtype": "property",
            "name": "vlambda",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 159,
            "description": "Angular constraint velocity that was added to the body during last step.",
            "itemtype": "property",
            "name": "wlambda",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 166,
            "description": "The angle of the body, in radians.",
            "itemtype": "property",
            "name": "angle",
            "type": "{number}",
            "example": [
                "\n    // The angle property is not normalized to the interval 0 to 2*pi, it can be any value.\n    // If you need a value between 0 and 2*pi, use the following function to normalize it.\n    function normalizeAngle(angle){\n        angle = angle % (2*Math.PI);\n        if(angle < 0){\n            angle += (2*Math.PI);\n        }\n        return angle;\n    }"
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 183,
            "description": "The angular velocity of the body, in radians per second.",
            "itemtype": "property",
            "name": "angularVelocity",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 190,
            "description": "The force acting on the body. Since the body force (and {{#crossLink \"Body/angularForce:property\"}}{{/crossLink}}) will be zeroed after each step, so you need to set the force before each step.",
            "itemtype": "property",
            "name": "force",
            "type": "{Array}",
            "example": [
                "\n    // This produces a forcefield of 1 Newton in the positive x direction.\n    for(var i=0; i<numSteps; i++){\n        body.force[0] = 1;\n        world.step(1/60);\n    }",
                "\n    // This will apply a rotational force on the body\n    for(var i=0; i<numSteps; i++){\n        body.angularForce = -3;\n        world.step(1/60);\n    }"
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 212,
            "description": "The angular force acting on the body. See {{#crossLink \"Body/force:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "angularForce",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 219,
            "description": "The linear damping acting on the body in the velocity direction. Should be a value between 0 and 1.",
            "itemtype": "property",
            "name": "damping",
            "type": "{Number}",
            "default": "0.1",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 227,
            "description": "The angular force acting on the body. Should be a value between 0 and 1.",
            "itemtype": "property",
            "name": "angularDamping",
            "type": "{Number}",
            "default": "0.1",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 235,
            "description": "The type of motion this body has. Should be one of: {{#crossLink \"Body/STATIC:property\"}}Body.STATIC{{/crossLink}}, {{#crossLink \"Body/DYNAMIC:property\"}}Body.DYNAMIC{{/crossLink}} and {{#crossLink \"Body/KINEMATIC:property\"}}Body.KINEMATIC{{/crossLink}}.\n\n* Static bodies do not move, and they do not respond to forces or collision.\n* Dynamic bodies body can move and respond to collisions and forces.\n* Kinematic bodies only moves according to its .velocity, and does not respond to collisions or force.",
            "itemtype": "property",
            "name": "motionState",
            "type": "{number}",
            "example": [
                "\n    // This body will move and interact with other bodies\n    var dynamicBody = new Body({\n        mass : 1  // If mass is nonzero, the body becomes dynamic automatically\n    });\n    dynamicBody.motionState == Body.DYNAMIC // true",
                "\n    // This body will not move at all\n    var staticBody = new Body({\n        mass : 0 // Will make the body static\n    });\n    staticBody.motionState == Body.STATIC // true",
                "\n    // This body will only move if you change its velocity\n    var kinematicBody = new Body();\n    kinematicBody.motionState = Body.KINEMATIC;"
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 266,
            "description": "Bounding circle radius.",
            "itemtype": "property",
            "name": "boundingRadius",
            "type": "{Number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 273,
            "description": "Bounding box of this body.",
            "itemtype": "property",
            "name": "aabb",
            "type": "{AABB}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 280,
            "description": "Indicates if the AABB needs update. Update it with {{#crossLink \"Body/updateAABB:method\"}}.updateAABB(){{/crossLink}}.",
            "itemtype": "property",
            "name": "aabbNeedsUpdate",
            "type": "{Boolean}",
            "see": [
                "updateAABB"
            ],
            "example": [
                "\n    // Force update the AABB\n    body.aabbNeedsUpdate = true;\n    body.updateAABB();\n    console.log(body.aabbNeedsUpdate); // false"
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 294,
            "description": "If true, the body will automatically fall to sleep. Note that you need to enable sleeping in the {{#crossLink \"World\"}}{{/crossLink}} before anything will happen.",
            "itemtype": "property",
            "name": "allowSleep",
            "type": "{Boolean}",
            "default": "true",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 304,
            "description": "One of {{#crossLink \"Body/AWAKE:property\"}}Body.AWAKE{{/crossLink}}, {{#crossLink \"Body/SLEEPY:property\"}}Body.SLEEPY{{/crossLink}} and {{#crossLink \"Body/SLEEPING:property\"}}Body.SLEEPING{{/crossLink}}.\n\nThe body is initially Body.AWAKE. If its velocity norm is below .sleepSpeedLimit, the sleepState will become Body.SLEEPY. If the body continues to be Body.SLEEPY for .sleepTimeLimit seconds, it will fall asleep (Body.SLEEPY).",
            "itemtype": "property",
            "name": "sleepState",
            "type": "{Number}",
            "default": "Body.AWAKE",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 315,
            "description": "If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.",
            "itemtype": "property",
            "name": "sleepSpeedLimit",
            "type": "{Number}",
            "default": "0.2",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 323,
            "description": "If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.",
            "itemtype": "property",
            "name": "sleepTimeLimit",
            "type": "{Number}",
            "default": "1",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 331,
            "description": "Gravity scaling factor. If you want the body to ignore gravity, set this to zero. If you want to reverse gravity, set it to -1.",
            "itemtype": "property",
            "name": "gravityScale",
            "type": "Number",
            "default": "1",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 338,
            "description": "The last time when the body went to SLEEPY state.",
            "itemtype": "property",
            "name": "timeLastSleepy",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 357,
            "description": "Set the total density of the body",
            "itemtype": "method",
            "name": "setDensity",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 367,
            "description": "Get the total area of all shapes in the body",
            "itemtype": "method",
            "name": "getArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 383,
            "description": "Updates the AABB of the Body",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 414,
            "description": "Update the bounding radius of the body. Should be done if any of the shapes\nare changed.",
            "itemtype": "method",
            "name": "updateBoundingRadius",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 437,
            "description": "Add a shape to the body. You can pass a local transform when adding a shape,\nso that the shape gets an offset and angle relative to the body center of mass.\nWill automatically update the mass properties and bounding radius.",
            "itemtype": "method",
            "name": "addShape",
            "params": [
                {
                    "name": "shape",
                    "description": "",
                    "type": "Shape"
                },
                {
                    "name": "offset",
                    "description": "Local body offset of the shape.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "angle",
                    "description": "Local body angle.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n    var body = new Body(),\n        shape = new Circle();\n\n    // Add the shape to the body, positioned in the center\n    body.addShape(shape);\n\n    // Add another shape to the body, positioned 1 unit length from the body center of mass along the local x-axis.\n    body.addShape(shape,[1,0]);\n\n    // Add another shape to the body, positioned 1 unit length from the body center of mass along the local y-axis, and rotated 90 degrees CCW.\n    body.addShape(shape,[0,1],Math.PI/2);"
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 479,
            "description": "Remove a shape",
            "itemtype": "method",
            "name": "removeShape",
            "params": [
                {
                    "name": "shape",
                    "description": "",
                    "type": "Shape"
                }
            ],
            "return": {
                "description": "True if the shape was found and removed, else false.",
                "type": "Boolean"
            },
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 499,
            "description": "Updates .inertia, .invMass, .invInertia for this Body. Should be called when\nchanging the structure or mass of the Body.",
            "itemtype": "method",
            "name": "updateMassProperties",
            "example": [
                "\n    body.mass += 1;\n    body.updateMassProperties();"
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 546,
            "description": "Apply force to a world point. This could for example be a point on the RigidBody surface. Applying force this way will add to Body.force and Body.angularForce.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "force",
                    "description": "The force to add.",
                    "type": "Array"
                },
                {
                    "name": "worldPoint",
                    "description": "A world point to apply the force on.",
                    "type": "Array"
                }
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 567,
            "description": "Transform a world point to local body frame.",
            "itemtype": "method",
            "name": "toLocalFrame",
            "params": [
                {
                    "name": "out",
                    "description": "The vector to store the result in",
                    "type": "Array"
                },
                {
                    "name": "worldPoint",
                    "description": "The input world vector",
                    "type": "Array"
                }
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 577,
            "description": "Transform a local point to world frame.",
            "itemtype": "method",
            "name": "toWorldFrame",
            "params": [
                {
                    "name": "out",
                    "description": "The vector to store the result in",
                    "type": "Array"
                },
                {
                    "name": "localPoint",
                    "description": "The input local vector",
                    "type": "Array"
                }
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 587,
            "description": "Reads a polygon shape path, and assembles convex shapes from that and puts them at proper offset points.",
            "itemtype": "method",
            "name": "fromPolygon",
            "params": [
                {
                    "name": "path",
                    "description": "An array of 2d vectors, e.g. [[0,0],[0,1],...] that resembles a concave or convex polygon. The shape must be simple and without holes.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "optimalDecomp",
                            "description": "Set to true if you need optimal decomposition. Warning: very slow for polygons with more than 10 vertices.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "skipSimpleCheck",
                            "description": "Set to true if you already know that the path is not intersecting itself.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "removeCollinearPoints",
                            "description": "Set to a number (angle threshold value) to remove collinear points, or false to keep all points.",
                            "type": "Boolean|Number",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "True on success, else false.",
                "type": "Boolean"
            },
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 666,
            "description": "Moves the shape offsets so their center of mass becomes the body center of mass.",
            "itemtype": "method",
            "name": "adjustCenterOfMass",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 712,
            "description": "Sets the force on the body to zero.",
            "itemtype": "method",
            "name": "setZeroForce",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 735,
            "description": "Apply damping, see <a href=\"http://code.google.com/p/bullet/issues/detail?id=74\">this</a> for details.",
            "itemtype": "method",
            "name": "applyDamping",
            "params": [
                {
                    "name": "dt",
                    "description": "Current time step",
                    "type": "Number"
                }
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 756,
            "description": "Wake the body up. Normally you should not need this, as the body is automatically awoken at events such as collisions.\nSets the sleepState to {{#crossLink \"Body/AWAKE:property\"}}Body.AWAKE{{/crossLink}} and emits the wakeUp event if the body wasn't awake before.",
            "itemtype": "method",
            "name": "wakeUp",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 770,
            "description": "Force body sleep",
            "itemtype": "method",
            "name": "sleep",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 785,
            "itemtype": "method",
            "name": "sleepTick",
            "params": [
                {
                    "name": "float",
                    "description": "time The world time in seconds"
                }
            ],
            "brief": "Called every timestep to update internal sleep timer and change sleep state if needed.",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 843,
            "itemtype": "event",
            "name": "sleepy",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 850,
            "itemtype": "event",
            "name": "sleep",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 857,
            "itemtype": "event",
            "name": "wakeup",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 864,
            "description": "Dynamic body.",
            "itemtype": "property",
            "name": "DYNAMIC",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 872,
            "description": "Static body.",
            "itemtype": "property",
            "name": "STATIC",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 880,
            "description": "Kinematic body.",
            "itemtype": "property",
            "name": "KINEMATIC",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 888,
            "itemtype": "property",
            "name": "AWAKE",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 895,
            "itemtype": "property",
            "name": "SLEEPY",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 902,
            "itemtype": "property",
            "name": "SLEEPING",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 24,
            "description": "Rest length of the spring.",
            "itemtype": "property",
            "name": "restLength",
            "type": "{number}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 31,
            "description": "Stiffness of the spring.",
            "itemtype": "property",
            "name": "stiffness",
            "type": "{number}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 38,
            "description": "Damping of the spring.",
            "itemtype": "property",
            "name": "damping",
            "type": "{number}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 45,
            "description": "First connected body.",
            "itemtype": "property",
            "name": "bodyA",
            "type": "{Body}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 52,
            "description": "Second connected body.",
            "itemtype": "property",
            "name": "bodyB",
            "type": "{Body}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 59,
            "description": "Anchor for bodyA in local bodyA coordinates.",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{Array}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 66,
            "description": "Anchor for bodyB in local bodyB coordinates.",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{Array}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 79,
            "description": "Set the anchor point on body A, using world coordinates.",
            "itemtype": "method",
            "name": "setWorldAnchorA",
            "params": [
                {
                    "name": "worldAnchorA",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 88,
            "description": "Set the anchor point on body B, using world coordinates.",
            "itemtype": "method",
            "name": "setWorldAnchorB",
            "params": [
                {
                    "name": "worldAnchorB",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 97,
            "description": "Get the anchor point on body A, in world coordinates.",
            "itemtype": "method",
            "name": "getWorldAnchorA",
            "params": [
                {
                    "name": "result",
                    "description": "The vector to store the result in.",
                    "type": "Array"
                }
            ],
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 106,
            "description": "Get the anchor point on body B, in world coordinates.",
            "itemtype": "method",
            "name": "getWorldAnchorB",
            "params": [
                {
                    "name": "result",
                    "description": "The vector to store the result in.",
                    "type": "Array"
                }
            ],
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 125,
            "description": "Apply the spring force to the connected bodies.",
            "itemtype": "method",
            "name": "applyForce",
            "class": "Spring"
        },
        {
            "file": "src/shapes/Capsule.js",
            "line": 16,
            "description": "The distance between the end points.",
            "itemtype": "property",
            "name": "length",
            "type": "Number",
            "class": "Capsule"
        },
        {
            "file": "src/shapes/Capsule.js",
            "line": 22,
            "description": "The radius of the capsule.",
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "class": "Capsule"
        },
        {
            "file": "src/shapes/Capsule.js",
            "line": 32,
            "description": "Compute the mass moment of inertia of the Capsule.",
            "itemtype": "method",
            "name": "conputeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "todo": [
                ""
            ],
            "class": "Capsule"
        },
        {
            "file": "src/shapes/Capsule.js",
            "line": 47,
            "itemtype": "method",
            "name": "updateBoundingRadius",
            "class": "Capsule"
        },
        {
            "file": "src/shapes/Capsule.js",
            "line": 54,
            "itemtype": "method",
            "name": "updateArea",
            "class": "Capsule"
        },
        {
            "file": "src/shapes/Capsule.js",
            "line": 63,
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "The resulting AABB.",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Capsule"
        },
        {
            "file": "src/shapes/Circle.js",
            "line": 15,
            "description": "The radius of the circle.",
            "itemtype": "property",
            "name": "radius",
            "type": "{number}",
            "class": "Circle"
        },
        {
            "file": "src/shapes/Circle.js",
            "line": 26,
            "itemtype": "method",
            "name": "computeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle"
        },
        {
            "file": "src/shapes/Circle.js",
            "line": 36,
            "itemtype": "method",
            "name": "updateBoundingRadius",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle"
        },
        {
            "file": "src/shapes/Circle.js",
            "line": 44,
            "itemtype": "method",
            "name": "updateArea",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Circle"
        },
        {
            "file": "src/shapes/Circle.js",
            "line": 52,
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "The resulting AABB.",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Circle"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 17,
            "description": "Vertices defined in the local frame.",
            "itemtype": "property",
            "name": "vertices",
            "type": "{Array}",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 31,
            "description": "The center of mass of the Convex",
            "itemtype": "property",
            "name": "centerOfMass",
            "type": "{Float32Array}",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 38,
            "description": "Triangulated version of this convex. The structure is Array of 3-Arrays, and each subarray contains 3 integers, referencing the vertices.",
            "itemtype": "property",
            "name": "triangles",
            "type": "{Array}",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 50,
            "description": "The bounding radius of the convex",
            "itemtype": "property",
            "name": "boundingRadius",
            "type": "{Number}",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 67,
            "description": "Update the .triangles property",
            "itemtype": "method",
            "name": "updateTriangles",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 106,
            "description": "Update the .centerOfMass property.",
            "itemtype": "method",
            "name": "updateCenterOfMass",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 148,
            "description": "Compute the mass moment of inertia of the Convex.",
            "itemtype": "method",
            "name": "computeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "see": [
                "http://www.gamedev.net/topic/342822-moment-of-inertia-of-a-polygon-2d/"
            ],
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 170,
            "description": "Updates the .boundingRadius property",
            "itemtype": "method",
            "name": "updateBoundingRadius",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 186,
            "description": "Get the area of the triangle spanned by the three points a, b, c. The area is positive if the points are given in counter-clockwise order, otherwise negative.",
            "static": 1,
            "itemtype": "method",
            "name": "triangleArea",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 199,
            "description": "Update the .area",
            "itemtype": "method",
            "name": "updateArea",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 221,
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Convex"
        },
        {
            "file": "src/shapes/Heightfield.js",
            "line": 19,
            "description": "An array of numbers, or height values, that are spread out along the x axis.",
            "itemtype": "property",
            "name": "data",
            "type": "Array",
            "class": "Heightfield"
        },
        {
            "file": "src/shapes/Heightfield.js",
            "line": 25,
            "description": "Max value of the data",
            "itemtype": "property",
            "name": "maxValue",
            "type": "Number",
            "class": "Heightfield"
        },
        {
            "file": "src/shapes/Heightfield.js",
            "line": 31,
            "description": "The width of each element",
            "itemtype": "property",
            "name": "elementWidth",
            "type": "Number",
            "class": "Heightfield"
        },
        {
            "file": "src/shapes/Heightfield.js",
            "line": 41,
            "itemtype": "method",
            "name": "computeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Heightfield"
        },
        {
            "file": "src/shapes/Heightfield.js",
            "line": 63,
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "The resulting AABB.",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Heightfield"
        },
        {
            "file": "src/shapes/Line.js",
            "line": 15,
            "description": "Length of this line",
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "class": "Line"
        },
        {
            "file": "src/shapes/Line.js",
            "line": 35,
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "The resulting AABB.",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Line"
        },
        {
            "file": "src/shapes/Particle.js",
            "line": 24,
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "src/shapes/Plane.js",
            "line": 18,
            "description": "Compute moment of inertia",
            "itemtype": "method",
            "name": "computeMomentOfInertia",
            "class": "Plane"
        },
        {
            "file": "src/shapes/Plane.js",
            "line": 26,
            "description": "Update the bounding radius",
            "itemtype": "method",
            "name": "updateBoundingRadius",
            "class": "Plane"
        },
        {
            "file": "src/shapes/Plane.js",
            "line": 34,
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Plane"
        },
        {
            "file": "src/shapes/Rectangle.js",
            "line": 21,
            "description": "Total width of the rectangle",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "Rectangle"
        },
        {
            "file": "src/shapes/Rectangle.js",
            "line": 28,
            "description": "Total height of the rectangle",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "Rectangle"
        },
        {
            "file": "src/shapes/Rectangle.js",
            "line": 41,
            "description": "Compute moment of inertia",
            "itemtype": "method",
            "name": "computeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle"
        },
        {
            "file": "src/shapes/Rectangle.js",
            "line": 53,
            "description": "Update the bounding radius",
            "itemtype": "method",
            "name": "updateBoundingRadius",
            "class": "Rectangle"
        },
        {
            "file": "src/shapes/Rectangle.js",
            "line": 68,
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "The resulting AABB.",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Rectangle"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 11,
            "description": "The type of the shape. One of:\n\n* {{#crossLink \"Shape/CIRCLE:property\"}}Shape.CIRCLE{{/crossLink}}\n* {{#crossLink \"Shape/PARTICLE:property\"}}Shape.PARTICLE{{/crossLink}}\n* {{#crossLink \"Shape/PLANE:property\"}}Shape.PLANE{{/crossLink}}\n* {{#crossLink \"Shape/CONVEX:property\"}}Shape.CONVEX{{/crossLink}}\n* {{#crossLink \"Shape/LINE:property\"}}Shape.LINE{{/crossLink}}\n* {{#crossLink \"Shape/RECTANGLE:property\"}}Shape.RECTANGLE{{/crossLink}}\n* {{#crossLink \"Shape/CAPSULE:property\"}}Shape.CAPSULE{{/crossLink}}\n* {{#crossLink \"Shape/HEIGHTFIELD:property\"}}Shape.HEIGHTFIELD{{/crossLink}}",
            "itemtype": "property",
            "name": "type",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 27,
            "description": "Shape object identifier.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "id",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 34,
            "description": "Bounding circle radius of this shape",
            "itemtype": "property",
            "name": "boundingRadius",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 41,
            "description": "Collision group that this shape belongs to (bit mask). See <a href=\"http://www.aurelienribon.com/blog/2011/07/box2d-tutorial-collision-filtering/\">this tutorial</a>.",
            "itemtype": "property",
            "name": "collisionGroup",
            "type": "{Number}",
            "example": [
                "\n    // Setup bits for each available group\n    var PLAYER = Math.pow(2,0),\n        ENEMY =  Math.pow(2,1),\n        GROUND = Math.pow(2,2)\n\n    // Put shapes into their groups\n    player1Shape.collisionGroup = PLAYER;\n    player2Shape.collisionGroup = PLAYER;\n    enemyShape  .collisionGroup = ENEMY;\n    groundShape .collisionGroup = GROUND;\n\n    // Assign groups that each shape collide with.\n    // Note that the players can collide with ground and enemies, but not with other players.\n    player1Shape.collisionMask = ENEMY | GROUND;\n    player2Shape.collisionMask = ENEMY | GROUND;\n    enemyShape  .collisionMask = PLAYER | GROUND;\n    groundShape .collisionMask = PLAYER | ENEMY;",
                "\n    // How collision check is done\n    if(shapeA.collisionGroup & shapeB.collisionMask)!=0 && (shapeB.collisionGroup & shapeA.collisionMask)!=0){\n        // The shapes will collide\n    }"
            ],
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 72,
            "description": "Collision mask of this shape. See .collisionGroup.",
            "itemtype": "property",
            "name": "collisionMask",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 80,
            "description": "Material to use in collisions for this Shape. If this is set to null, the world will use default material properties instead.",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 87,
            "description": "Area of this shape.",
            "itemtype": "property",
            "name": "area",
            "type": "{Number}",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 94,
            "description": "Set to true if you want this shape to be a sensor. A sensor does not generate contacts, but it still reports contact events. This is good if you want to know if a shape is overlapping another shape, without them generating contacts.",
            "itemtype": "property",
            "name": "sensor",
            "type": "Boolean",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 105,
            "static": 1,
            "itemtype": "property",
            "name": "CIRCLE",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 111,
            "static": 1,
            "itemtype": "property",
            "name": "PARTICLE",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 117,
            "static": 1,
            "itemtype": "property",
            "name": "PLANE",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 123,
            "static": 1,
            "itemtype": "property",
            "name": "CONVEX",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 129,
            "static": 1,
            "itemtype": "property",
            "name": "LINE",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 135,
            "static": 1,
            "itemtype": "property",
            "name": "RECTANGLE",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 141,
            "static": 1,
            "itemtype": "property",
            "name": "CAPSULE",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 147,
            "static": 1,
            "itemtype": "property",
            "name": "HEIGHTFIELD",
            "type": "Number",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 153,
            "description": "Should return the moment of inertia around the Z axis of the body given the total mass. See <a href=\"http://en.wikipedia.org/wiki/List_of_moments_of_inertia\">Wikipedia's list of moments of inertia</a>.",
            "itemtype": "method",
            "name": "computeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If the inertia is infinity or if the object simply isn't possible to rotate, return 0.",
                "type": "Number"
            },
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 163,
            "description": "Returns the bounding circle radius of this shape.",
            "itemtype": "method",
            "name": "updateBoundingRadius",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 172,
            "description": "Update the .area property of the shape.",
            "itemtype": "method",
            "name": "updateArea",
            "class": "Shape"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 180,
            "description": "Compute the world axis-aligned bounding box (AABB) of this shape.",
            "itemtype": "method",
            "name": "computeAABB",
            "params": [
                {
                    "name": "out",
                    "description": "The resulting AABB.",
                    "type": "AABB"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Shape"
        },
        {
            "file": "src/solver/GSSolver.js",
            "line": 22,
            "description": "The number of iterations to do when solving. More gives better results, but is more expensive.",
            "itemtype": "property",
            "name": "iterations",
            "type": "{Number}",
            "class": "GSSolver"
        },
        {
            "file": "src/solver/GSSolver.js",
            "line": 29,
            "description": "The error tolerance, per constraint. If the total error is below this limit, the solver will stop iterating. Set to zero for as good solution as possible, but to something larger than zero to make computations faster.",
            "itemtype": "property",
            "name": "tolerance",
            "type": "{Number}",
            "class": "GSSolver"
        },
        {
            "file": "src/solver/GSSolver.js",
            "line": 41,
            "description": "Set to true to set all right hand side terms to zero when solving. Can be handy for a few applications.",
            "itemtype": "property",
            "name": "useZeroRHS",
            "type": "{Boolean}",
            "class": "GSSolver"
        },
        {
            "file": "src/solver/GSSolver.js",
            "line": 48,
            "description": "Number of solver iterations that are done to approximate normal forces. When these iterations are done, friction force will be computed from the contact normal forces. These friction forces will override any other friction forces set from the World for example.\nThe solver will use less iterations if the solution is below the .tolerance.",
            "itemtype": "property",
            "name": "frictionIterations",
            "type": "{Number}",
            "class": "GSSolver"
        },
        {
            "file": "src/solver/GSSolver.js",
            "line": 56,
            "description": "The number of iterations that were made during the last solve. If .tolerance is zero, this value will always be equal to .iterations, but if .tolerance is larger than zero, and the solver can quit early, then this number will be somewhere between 1 and .iterations.",
            "itemtype": "property",
            "name": "usedIterations",
            "type": "Number",
            "class": "GSSolver"
        },
        {
            "file": "src/solver/GSSolver.js",
            "line": 70,
            "description": "Solve the system of equations",
            "itemtype": "method",
            "name": "solve",
            "params": [
                {
                    "name": "h",
                    "description": "Time step",
                    "type": "Number"
                },
                {
                    "name": "world",
                    "description": "World to solve",
                    "type": "World"
                }
            ],
            "class": "GSSolver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 19,
            "description": "Current equations in the solver.",
            "itemtype": "property",
            "name": "equations",
            "type": "{Array}",
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 27,
            "description": "Function that is used to sort all equations before each solve.",
            "itemtype": "property",
            "name": "equationSortFunction",
            "type": "{function|boolean}",
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 36,
            "description": "Method to be implemented in each subclass",
            "itemtype": "method",
            "name": "solve",
            "params": [
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 48,
            "description": "Solves all constraints in an island.",
            "itemtype": "method",
            "name": "solveIsland",
            "params": [
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "island",
                    "description": "",
                    "type": "Island"
                }
            ],
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 71,
            "description": "Sort all equations using the .equationSortFunction. Should be called by subclasses before solving.",
            "itemtype": "method",
            "name": "sortEquations",
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 81,
            "description": "Add an equation to be solved.",
            "itemtype": "method",
            "name": "addEquation",
            "params": [
                {
                    "name": "eq",
                    "description": "",
                    "type": "Equation"
                }
            ],
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 93,
            "description": "Add equations. Same as .addEquation, but this time the argument is an array of Equations",
            "itemtype": "method",
            "name": "addEquations",
            "params": [
                {
                    "name": "eqs",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 109,
            "description": "Remove an equation.",
            "itemtype": "method",
            "name": "removeEquation",
            "params": [
                {
                    "name": "eq",
                    "description": "",
                    "type": "Equation"
                }
            ],
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 122,
            "description": "Remove all currently added equations.",
            "itemtype": "method",
            "name": "removeAllEquations",
            "class": "Solver"
        },
        {
            "file": "src/utils/Utils.js",
            "line": 10,
            "description": "Append the values in array b to the array a. See <a href=\"http://stackoverflow.com/questions/1374126/how-to-append-an-array-to-an-existing-javascript-array/1374131#1374131\">this</a> for an explanation.",
            "itemtype": "method",
            "name": "appendArray",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Utils"
        },
        {
            "file": "src/utils/Utils.js",
            "line": 27,
            "description": "Garbage free Array.splice(). Does not allocate a new array.",
            "itemtype": "method",
            "name": "splice",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "howmany",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Utils"
        },
        {
            "file": "src/utils/Utils.js",
            "line": 43,
            "description": "The array type to use for internal numeric computations.",
            "type": "{Array}",
            "static": 1,
            "itemtype": "property",
            "name": "ARRAY_TYPE",
            "class": "Utils"
        },
        {
            "file": "src/utils/Utils.js",
            "line": 51,
            "description": "Extend an object with the properties of another",
            "static": 1,
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Utils"
        },
        {
            "file": "src/world/Island.js",
            "line": 12,
            "description": "Current equations in this island.",
            "itemtype": "property",
            "name": "equations",
            "type": "{Array}",
            "class": "Island"
        },
        {
            "file": "src/world/Island.js",
            "line": 19,
            "description": "Current bodies in this island.",
            "itemtype": "property",
            "name": "bodies",
            "type": "{Array}",
            "class": "Island"
        },
        {
            "file": "src/world/Island.js",
            "line": 27,
            "description": "Clean this island from bodies and equations.",
            "itemtype": "method",
            "name": "reset",
            "class": "Island"
        },
        {
            "file": "src/world/Island.js",
            "line": 37,
            "description": "Get all unique bodies in this island.",
            "itemtype": "method",
            "name": "getBodies",
            "return": {
                "description": "An array of Body",
                "type": "Array"
            },
            "class": "Island"
        },
        {
            "file": "src/world/Island.js",
            "line": 60,
            "description": "Check if the entire island wants to sleep.",
            "itemtype": "method",
            "name": "wantsToSleep",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Island"
        },
        {
            "file": "src/world/Island.js",
            "line": 75,
            "description": "Make all bodies in the island sleep.",
            "itemtype": "method",
            "name": "sleep",
            "class": "Island"
        },
        {
            "file": "src/world/IslandManager.js",
            "line": 22,
            "description": "The equations to split. Manually fill this array before running .split().",
            "itemtype": "property",
            "name": "equations",
            "type": "Array",
            "class": "IslandManager"
        },
        {
            "file": "src/world/IslandManager.js",
            "line": 28,
            "description": "The resulting {{#crossLink \"Island\"}}{{/crossLink}}s.",
            "itemtype": "property",
            "name": "islands",
            "type": "Array",
            "class": "IslandManager"
        },
        {
            "file": "src/world/IslandManager.js",
            "line": 34,
            "description": "The resulting graph nodes.",
            "itemtype": "property",
            "name": "nodes",
            "type": "Array",
            "class": "IslandManager"
        },
        {
            "file": "src/world/IslandManager.js",
            "line": 40,
            "description": "The node queue, used when traversing the graph of nodes.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "queue",
            "type": "Array",
            "class": "IslandManager"
        },
        {
            "file": "src/world/IslandManager.js",
            "line": 48,
            "description": "Get an unvisited node from a list of nodes.",
            "static": 1,
            "itemtype": "method",
            "name": "getUnvisitedNode",
            "params": [
                {
                    "name": "nodes",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The node if found, else false.",
                "type": "IslandNode|boolean"
            },
            "class": "IslandManager"
        },
        {
            "file": "src/world/IslandManager.js",
            "line": 66,
            "description": "Visit a node.",
            "itemtype": "method",
            "name": "visit",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "IslandNode"
                },
                {
                    "name": "bds",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "eqs",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "IslandManager"
        },
        {
            "file": "src/world/IslandManager.js",
            "line": 84,
            "description": "Runs the search algorithm, starting at a root node. The resulting bodies and equations will be stored in the provided arrays.",
            "itemtype": "method",
            "name": "bfs",
            "params": [
                {
                    "name": "root",
                    "description": "The node to start from",
                    "type": "IslandNode"
                },
                {
                    "name": "bds",
                    "description": "An array to append resulting Bodies to.",
                    "type": "Array"
                },
                {
                    "name": "eqs",
                    "description": "An array to append resulting Equations to.",
                    "type": "Array"
                }
            ],
            "class": "IslandManager"
        },
        {
            "file": "src/world/IslandManager.js",
            "line": 122,
            "description": "Split the world into independent islands. The result is stored in .islands.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "return": {
                "description": "The generated islands",
                "type": "Array"
            },
            "class": "IslandManager"
        },
        {
            "file": "src/world/IslandNode.js",
            "line": 11,
            "description": "The body that is contained in this node.",
            "itemtype": "property",
            "name": "",
            "type": "Body",
            "class": "IslandNode"
        },
        {
            "file": "src/world/IslandNode.js",
            "line": 17,
            "description": "Neighboring IslandNodes",
            "itemtype": "property",
            "name": "neighbors",
            "type": "Array",
            "class": "IslandNode"
        },
        {
            "file": "src/world/IslandNode.js",
            "line": 23,
            "description": "Equations connected to this node.",
            "itemtype": "property",
            "name": "equations",
            "type": "Array",
            "class": "IslandNode"
        },
        {
            "file": "src/world/IslandNode.js",
            "line": 29,
            "description": "If this node was visiting during the graph traversal.",
            "itemtype": "property",
            "name": "visited",
            "type": "{Boolean}",
            "class": "IslandNode"
        },
        {
            "file": "src/world/IslandNode.js",
            "line": 37,
            "description": "Clean this node from bodies and equations.",
            "itemtype": "method",
            "name": "reset",
            "class": "IslandNode"
        },
        {
            "file": "src/world/World.js",
            "line": 64,
            "description": "All springs in the world. To add a spring to the world, use {{#crossLink \"World/addSpring:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "springs",
            "type": "{Array}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 72,
            "description": "All bodies in the world. To add a body to the world, use {{#crossLink \"World/addBody:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "bodies",
            "type": "Array",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 78,
            "description": "Disabled body collision pairs. See {{#crossLink \"World/disableBodyCollision:method\"}}.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "disabledBodyCollisionPairs",
            "type": "Array",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 85,
            "description": "The solver used to satisfy constraints and contacts. Default is {{#crossLink \"GSSolver\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "solver",
            "type": "Solver",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 91,
            "description": "The narrowphase to use to generate contacts.",
            "itemtype": "property",
            "name": "narrowphase",
            "type": "{Narrowphase}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 99,
            "description": "The island manager of this world.",
            "itemtype": "property",
            "name": "islandManager",
            "type": "IslandManager",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 105,
            "description": "Gravity in the world. This is applied on all bodies in the beginning of each step().",
            "itemtype": "property",
            "name": "gravity",
            "type": "{Array}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 113,
            "description": "Gravity to use when approximating the friction max force (mu*mass*gravity).",
            "itemtype": "property",
            "name": "frictionGravity",
            "type": "Number",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 119,
            "description": "Set to true if you want .frictionGravity to be automatically set to the length of .gravity.",
            "itemtype": "property",
            "name": "useWorldGravityAsFrictionGravity",
            "type": "Boolean",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 125,
            "description": "If the length of .gravity is zero, and .useWorldGravityAsFrictionGravity=true, then switch to using .frictionGravity for friction instead. This fallback is useful for gravityless games.",
            "itemtype": "property",
            "name": "useFrictionGravityOnZeroGravity",
            "type": "Boolean",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 131,
            "description": "Whether to do timing measurements during the step() or not.",
            "itemtype": "property",
            "name": "doPofiling",
            "type": "{Boolean}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 139,
            "description": "How many millisecconds the last step() took. This is updated each step if .doProfiling is set to true.",
            "itemtype": "property",
            "name": "lastStepTime",
            "type": "{Number}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 147,
            "description": "The broadphase algorithm to use.",
            "itemtype": "property",
            "name": "broadphase",
            "type": "{Broadphase}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 156,
            "description": "User-added constraints.",
            "itemtype": "property",
            "name": "constraints",
            "type": "{Array}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 164,
            "description": "Dummy default material in the world, used in .defaultContactMaterial",
            "itemtype": "property",
            "name": "defaultMaterial",
            "type": "Material",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 170,
            "description": "The default contact material to use, if no contact material was set for the colliding materials.",
            "itemtype": "property",
            "name": "defaultContactMaterial",
            "type": "ContactMaterial",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 176,
            "description": "For keeping track of what time step size we used last step",
            "itemtype": "property",
            "name": "lastTimeStep",
            "type": "{Number}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 183,
            "description": "Enable to automatically apply spring forces each step.",
            "itemtype": "property",
            "name": "applySpringForces",
            "type": "{Boolean}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 190,
            "description": "Enable to automatically apply body damping each step.",
            "itemtype": "property",
            "name": "applyDamping",
            "type": "{Boolean}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 197,
            "description": "Enable to automatically apply gravity each step.",
            "itemtype": "property",
            "name": "applyGravity",
            "type": "{Boolean}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 204,
            "description": "Enable/disable constraint solving in each step.",
            "itemtype": "property",
            "name": "solveConstraints",
            "type": "{Boolean}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 211,
            "description": "The ContactMaterials added to the World.",
            "itemtype": "property",
            "name": "contactMaterials",
            "type": "{Array}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 218,
            "description": "World time.",
            "itemtype": "property",
            "name": "time",
            "type": "{Number}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 225,
            "description": "Is true during the step().",
            "itemtype": "property",
            "name": "stepping",
            "type": "Boolean",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 231,
            "description": "Bodies that are scheduled to be removed at the end of the step.",
            "itemtype": "property",
            "name": "bodiesToBeRemoved",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 240,
            "description": "Whether to enable island splitting. Island splitting can be an advantage for many things, including solver performance. See {{#crossLink \"IslandManager\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "islandSplit",
            "type": "Boolean",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 246,
            "description": "Set to true if you want to the world to emit the \"impact\" event. Turning this off could improve performance.",
            "itemtype": "property",
            "name": "emitImpactEvent",
            "type": "{Boolean}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 257,
            "description": "Fired after the step().",
            "itemtype": "event",
            "name": "postStep",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 265,
            "description": "Fired when a body is added to the world.",
            "itemtype": "event",
            "name": "addBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 275,
            "description": "Fired when a body is removed from the world.",
            "itemtype": "event",
            "name": "removeBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 285,
            "description": "Fired when a spring is added to the world.",
            "itemtype": "event",
            "name": "addSpring",
            "params": [
                {
                    "name": "spring",
                    "description": "",
                    "type": "Spring"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 295,
            "description": "Fired when a first contact is created between two bodies. This event is fired after the step has been done.",
            "itemtype": "event",
            "name": "impact",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 310,
            "description": "Fired after the Broadphase has collected collision pairs in the world.\nInside the event handler, you can modify the pairs array as you like, to\nprevent collisions between objects that you don't want.",
            "itemtype": "event",
            "name": "postBroadphase",
            "params": [
                {
                    "name": "pairs",
                    "description": "An array of collision pairs. If this array is [body1,body2,body3,body4], then the body pairs 1,2 and 3,4 would advance to narrowphase.",
                    "type": "Array"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 322,
            "description": "Enable / disable automatic body sleeping. Sleeping can improve performance. You might need to {{#crossLink \"Body/wakeUp:method\"}}wake up{{/crossLink}} the bodies if they fall asleep when they shouldn't. If you want to enable sleeping in the world, but want to disable it for a particular body, see {{#crossLink \"Body/allowSleep:property\"}}Body.allowSleep{{/crossLink}}.",
            "itemtype": "property",
            "name": "allowSleep",
            "type": "{Boolean}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 329,
            "description": "Enable or disable island sleeping. Note that you must enable {{#crossLink \"World/islandSplit:property\"}}.islandSplit{{/crossLink}} for this to work.",
            "itemtype": "property",
            "name": "enableIslandSleeping",
            "type": "Boolean",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 335,
            "description": "Fired when two shapes starts start to overlap. Fired in the narrowphase, during step.",
            "itemtype": "event",
            "name": "beginContact",
            "params": [
                {
                    "name": "shapeA",
                    "description": "",
                    "type": "Shape"
                },
                {
                    "name": "shapeB",
                    "description": "",
                    "type": "Shape"
                },
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "contactEquations",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 353,
            "description": "Fired when two shapes stop overlapping, after the narrowphase (during step).",
            "itemtype": "event",
            "name": "endContact",
            "params": [
                {
                    "name": "shapeA",
                    "description": "",
                    "type": "Shape"
                },
                {
                    "name": "shapeB",
                    "description": "",
                    "type": "Shape"
                },
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "contactEquations",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 370,
            "description": "Fired just before equations are added to the solver to be solved. Can be used to control what equations goes into the solver.",
            "itemtype": "event",
            "name": "preSolve",
            "params": [
                {
                    "name": "contactEquations",
                    "description": "An array of contacts to be solved.",
                    "type": "Array"
                },
                {
                    "name": "frictionEquations",
                    "description": "An array of friction equations to be solved.",
                    "type": "Array"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 389,
            "description": "Add a constraint to the simulation.",
            "itemtype": "method",
            "name": "addConstraint",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "Constraint"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 399,
            "description": "Add a ContactMaterial to the simulation.",
            "itemtype": "method",
            "name": "addContactMaterial",
            "params": [
                {
                    "name": "contactMaterial",
                    "description": "",
                    "type": "ContactMaterial"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 408,
            "description": "Removes a contact material",
            "itemtype": "method",
            "name": "removeContactMaterial",
            "params": [
                {
                    "name": "cm",
                    "description": "",
                    "type": "ContactMaterial"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 421,
            "description": "Get a contact material given two materials",
            "itemtype": "method",
            "name": "getContactMaterial",
            "params": [
                {
                    "name": "materialA",
                    "description": "",
                    "type": "Material"
                },
                {
                    "name": "materialB",
                    "description": "",
                    "type": "Material"
                }
            ],
            "return": {
                "description": "The matching ContactMaterial, or false on fail.",
                "type": "ContactMaterial"
            },
            "todo": [
                "Use faster hash map to lookup from material id's"
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 441,
            "description": "Removes a constraint",
            "itemtype": "method",
            "name": "removeConstraint",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "Constraint"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 466,
            "description": "Step the physics world forward in time.\n\nThere are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.",
            "itemtype": "method",
            "name": "step",
            "params": [
                {
                    "name": "dt",
                    "description": "The fixed time step size to use.",
                    "type": "Number"
                },
                {
                    "name": "timeSinceLastCalled",
                    "description": "The time elapsed since the function was last called.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "maxSubSteps",
                    "description": "Maximum number of fixed steps to take per function call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                }
            ],
            "example": [
                "\n    // fixed timestepping without interpolation\n    var world = new World();\n    world.step(0.01);"
            ],
            "see": [
                "http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World"
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 529,
            "description": "Make a fixed step.",
            "itemtype": "method",
            "name": "internalStep",
            "params": [
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 829,
            "description": "Move a body forward in time.",
            "static": 1,
            "itemtype": "method",
            "name": "integrateBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "todo": [
                "Move to Body.prototype?"
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 862,
            "description": "Runs narrowphase for the shape pair i and j.",
            "itemtype": "method",
            "name": "runNarrowphase",
            "params": [
                {
                    "name": "np",
                    "description": "",
                    "type": "Narrowphase"
                },
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Shape"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Shape"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mu",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1009,
            "description": "Add a spring to the simulation",
            "itemtype": "method",
            "name": "addSpring",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "Spring"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1021,
            "description": "Remove a spring",
            "itemtype": "method",
            "name": "removeSpring",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "Spring"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1034,
            "description": "Add a body to the simulation",
            "itemtype": "method",
            "name": "addBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "example": [
                "\n    var world = new World(),\n        body = new Body();\n    world.addBody(body);"
            ],
            "todo": [
                "What if this is done during step?"
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1055,
            "description": "Remove a body from the simulation. If this method is called during step(), the body removal is scheduled to after the step.",
            "itemtype": "method",
            "name": "removeBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1076,
            "description": "Get a body by its id.",
            "itemtype": "method",
            "name": "getBodyById",
            "return": {
                "description": "The body, or false if it was not found.",
                "type": "Body|Boolean"
            },
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1092,
            "description": "Disable collision between two bodies",
            "itemtype": "method",
            "name": "disableCollision",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1102,
            "description": "Enable collisions between the given two bodies",
            "itemtype": "method",
            "name": "enableCollision",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1143,
            "description": "Convert the world to a JSON-serializable Object.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "Object"
            },
            "deprecated": true,
            "deprecationMessage": "Should use Serializer instead.",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1392,
            "description": "Load a scene from a serialized state in JSON format.",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True on success, else false.",
                "type": "Boolean"
            },
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1660,
            "description": "Resets the World, removes all bodies, constraints and springs.",
            "itemtype": "method",
            "name": "clear",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1702,
            "description": "Get a copy of this World instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "World"
            },
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1717,
            "description": "Test if a world point overlaps bodies",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "worldPoint",
                    "description": "Point to use for intersection tests",
                    "type": "Array"
                },
                {
                    "name": "bodies",
                    "description": "A list of objects to check for intersection",
                    "type": "Array"
                },
                {
                    "name": "precision",
                    "description": "Used for matching against particles and lines. Adds some margin to these infinitesimal objects.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array of bodies that overlap the point",
                "type": "Array"
            },
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1768,
            "description": "Sets the Equation parameters for all constraints and contact materials.",
            "itemtype": "method",
            "name": "setGlobalEquationParameters",
            "params": [
                {
                    "name": "parameters",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "relaxation",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "stiffness",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1818,
            "description": "Set the stiffness for all equations and contact materials.",
            "itemtype": "method",
            "name": "setGlobalStiffness",
            "params": [
                {
                    "name": "stiffness",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 1829,
            "description": "Set the relaxation for all equations and contact materials.",
            "itemtype": "method",
            "name": "setGlobalRelaxation",
            "params": [
                {
                    "name": "relaxation",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "World"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: brief",
            "line": " src/objects/Body.js:785"
        }
    ]
}